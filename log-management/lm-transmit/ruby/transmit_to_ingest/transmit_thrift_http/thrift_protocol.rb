#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'logm_types'

module LogManagementThriftProtocol
  class Client
    include ::Thrift::Client

    def append(record)
      send_append(record)
      return recv_append()
    end

    def send_append(record)
      send_message('append', Append_args, :record => record)
    end

    def recv_append()
      result = receive_message(Append_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'append failed: unknown result')
    end

    def appendBatch(records)
      send_appendBatch(records)
      return recv_appendBatch()
    end

    def send_appendBatch(records)
      send_message('appendBatch', AppendBatch_args, :records => records)
    end

    def recv_appendBatch()
      result = receive_message(AppendBatch_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'appendBatch failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_append(seqid, iprot, oprot)
      args = read_args(iprot, Append_args)
      result = Append_result.new()
      result.success = @handler.append(args.record)
      write_result(result, oprot, 'append', seqid)
    end

    def process_appendBatch(seqid, iprot, oprot)
      args = read_args(iprot, AppendBatch_args)
      result = AppendBatch_result.new()
      result.success = @handler.appendBatch(args.records)
      write_result(result, oprot, 'appendBatch', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Append_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORD = 1

    FIELDS = {
      RECORD => {:type => ::Thrift::Types::STRUCT, :name => 'record', :class => ::LogManagementRecord}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Append_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::RequestResponse}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @success.nil? || ::RequestResponse::VALID_VALUES.include?(@success)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AppendBatch_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECORDS = 1

    FIELDS = {
      RECORDS => {:type => ::Thrift::Types::LIST, :name => 'records', :element => {:type => ::Thrift::Types::STRUCT, :class => ::LogManagementRecord}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AppendBatch_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::RequestResponse}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @success.nil? || ::RequestResponse::VALID_VALUES.include?(@success)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

end

